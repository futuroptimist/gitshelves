from typing import Iterable, Dict, Tuple


def blocks_for_contributions(count: int) -> int:
    """Return the number of stacked blocks for a contribution count.

    Uses a logarithmic scale where 1 block represents 1-9 contributions,
    2 blocks represent 10-99 contributions, and so on. Zero or negative
    counts yield zero blocks.
    """
    if count <= 0:
        return 0
    import math

    return int(math.log10(count)) + 1


def generate_scad(contributions: Iterable[int]) -> str:
    """Generate an OpenSCAD script for a sequence of daily contributions."""
    scad_lines = ["// Generated by gitshelves"]
    block_size = 10  # mm per block cube
    spacing = 12
    for idx, count in enumerate(contributions):
        blocks = blocks_for_contributions(count)
        for level in range(blocks):
            x = idx * spacing
            y = 0
            z = level * block_size
            scad_lines.append(f"translate([{x}, {y}, {z}]) cube({block_size});")
    return "\n".join(scad_lines)


def generate_scad_monthly(contributions: Dict[Tuple[int, int], int]) -> str:
    """Generate an OpenSCAD script from monthly contribution counts.

    The ``contributions`` mapping uses ``(year, month)`` tuples as keys. A
    1x12 grid is created for each year in the data set where the x-axis
    represents the month and the y-axis the year index.
    """
    scad_lines = ["// Generated by gitshelves"]
    block_size = 10  # mm per block cube
    spacing = 12
    years = sorted({year for year, _ in contributions})
    for y_idx, year in enumerate(years):
        for month in range(1, 13):
            count = contributions.get((year, month), 0)
            blocks = blocks_for_contributions(count)
            for level in range(blocks):
                x = (month - 1) * spacing
                y = y_idx * spacing
                z = level * block_size
                scad_lines.append(
                    f"translate([{x}, {y}, {z}]) cube({block_size}); // {year}-{month:02}"
                )
    return "\n".join(scad_lines)
