import pytest

from gitshelves.scad import (
    blocks_for_contributions,
    generate_scad,
    generate_scad_monthly,
    generate_scad_monthly_levels,
    group_scad_levels,
    scad_to_stl,
)


def test_blocks_for_contributions():
    assert blocks_for_contributions(0) == 0
    assert blocks_for_contributions(1) == 1
    assert blocks_for_contributions(9) == 1
    assert blocks_for_contributions(10) == 2
    assert blocks_for_contributions(99) == 2
    assert blocks_for_contributions(100) == 3


def test_generate_scad_monthly():
    counts = {
        (2021, 1): 1,
        (2022, 1): 10,
    }
    scad = generate_scad_monthly(counts)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad
    assert "translate([0, 12, 10]) cube(10);" in scad


def test_generate_scad_monthly_custom_rows():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scad = generate_scad_monthly(counts, months_per_row=1)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad


def test_generate_scad_monthly_empty():
    scad = generate_scad_monthly({})
    assert scad.strip() == "// Generated by gitshelves"


def test_generate_scad_monthly_levels():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scads = generate_scad_monthly_levels(counts)
    assert 1 in scads and 2 in scads
    assert "translate([0, 0, 0]) cube(10);" in scads[1]
    assert "translate([12, 0, 0]) cube(10);" in scads[1]
    assert "translate([12, 0, 10]) cube(10);" in scads[2]


def test_group_scad_levels():
    levels = {
        1: "// Generated by g\nA",
        2: "// Generated by g\nB",
        3: "// Generated by g\nC",
    }
    grouped = group_scad_levels(levels, 2)
    assert grouped[1] == "// Generated by gitshelves\nA\nB"
    assert grouped[2] == "// Generated by gitshelves\nC"


def test_generate_scad_monthly_levels_empty():
    assert generate_scad_monthly_levels({}) == {}


def test_group_scad_levels_empty():
    assert group_scad_levels({}, 3) == {}


def test_group_scad_levels_single_group():
    levels = {
        1: "// Generated by g\nA",
        2: "// Generated by g\nB",
    }
    grouped = group_scad_levels(levels, 1)
    assert grouped[1] == "// Generated by gitshelves\nA\nB"


def test_group_scad_levels_invalid_groups():
    levels = {1: "// Generated by g\nA"}
    with pytest.raises(ValueError):
        group_scad_levels(levels, 0)


def test_scad_to_stl_missing(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: None)
    with pytest.raises(FileNotFoundError):
        scad_to_stl(str(scad), str(stl))


def test_scad_to_stl_calls_openscad(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: "/usr/bin/openscad")
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)
    monkeypatch.setenv("DISPLAY", ":0")
    scad_to_stl(str(scad), str(stl))
    assert called["cmd"] == ["openscad", "-o", str(stl), str(scad)]


def test_scad_to_stl_uses_xvfb(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")

    def which(binary):
        if binary == "openscad":
            return "/usr/bin/openscad"
        if binary == "xvfb-run":
            return "/usr/bin/xvfb-run"
        return None

    monkeypatch.setattr("shutil.which", which)
    monkeypatch.delenv("DISPLAY", raising=False)
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)

    scad_to_stl(str(scad), str(stl))
    assert called["cmd"][0] == "xvfb-run"


def test_scad_to_stl_xvfb_missing(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")

    def which(binary):
        if binary == "openscad":
            return "/usr/bin/openscad"
        return None

    monkeypatch.setattr("shutil.which", which)
    monkeypatch.delenv("DISPLAY", raising=False)
    with pytest.raises(RuntimeError):
        scad_to_stl(str(scad), str(stl))


def test_generate_scad():
    scad = generate_scad([0, 1, 10])
    lines = scad.splitlines()
    assert lines[0] == "// Generated by gitshelves"
    assert "translate([12, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 10]) cube(10);" in scad
    assert "translate([0, 0, 0]) cube(10);" not in scad
