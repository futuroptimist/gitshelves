import pytest

from gitshelves.scad import (
    blocks_for_contributions,
    generate_scad,
    generate_scad_monthly,
    scad_to_stl,
)


def test_blocks_for_contributions():
    assert blocks_for_contributions(0) == 0
    assert blocks_for_contributions(1) == 1
    assert blocks_for_contributions(9) == 1
    assert blocks_for_contributions(10) == 2
    assert blocks_for_contributions(99) == 2
    assert blocks_for_contributions(100) == 3


def test_generate_scad_monthly():
    counts = {
        (2021, 1): 1,
        (2022, 1): 10,
    }
    scad = generate_scad_monthly(counts)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad
    assert "translate([0, 12, 10]) cube(10);" in scad


def test_generate_scad_monthly_custom_rows():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scad = generate_scad_monthly(counts, months_per_row=1)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad


def test_scad_to_stl_missing(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: None)
    with pytest.raises(FileNotFoundError):
        scad_to_stl(str(scad), str(stl))


def test_scad_to_stl_calls_openscad(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: "/usr/bin/openscad")
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)
    scad_to_stl(str(scad), str(stl))
    assert called["cmd"] == ["openscad", "-o", str(stl), str(scad)]


def test_generate_scad():
    scad = generate_scad([0, 1, 10])
    lines = scad.splitlines()
    assert lines[0] == "// Generated by gitshelves"
    assert "translate([12, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 10]) cube(10);" in scad
    assert "translate([0, 0, 0]) cube(10);" not in scad
