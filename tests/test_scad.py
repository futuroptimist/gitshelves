import pytest

from gitshelves import scad as scad_module
from gitshelves.scad import (
    _iter_monthly_block_positions,
    blocks_for_contributions,
    generate_contrib_cube_stack_scad,
    generate_month_calendar_scad,
    generate_monthly_calendar_scads,
    generate_scad,
    generate_scad_monthly,
    generate_scad_monthly_levels,
    generate_gridfinity_plate_scad,
    group_scad_levels,
    scad_to_stl,
)


def test_blocks_for_contributions():
    assert blocks_for_contributions(0) == 0
    assert blocks_for_contributions(1) == 1
    assert blocks_for_contributions(9) == 1
    assert blocks_for_contributions(10) == 2
    assert blocks_for_contributions(99) == 2
    assert blocks_for_contributions(100) == 3


def test_blocks_for_contributions_negative():
    assert blocks_for_contributions(-5) == 0


def test_generate_scad_monthly():
    counts = {
        (2021, 1): 1,
        (2022, 1): 10,
    }
    scad = generate_scad_monthly(counts)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad
    assert "translate([0, 12, 10]) cube(10);" in scad


def test_generate_scad_monthly_custom_rows():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scad = generate_scad_monthly(counts, months_per_row=1)
    assert "translate([0, 0, 0]) cube(10);" in scad
    assert "translate([0, 12, 0]) cube(10);" in scad


def test_generate_scad_monthly_empty():
    scad = generate_scad_monthly({})
    assert scad.strip() == "// Generated by gitshelves"


def test_iter_monthly_block_positions_empty():
    assert list(_iter_monthly_block_positions({}, 12)) == []


def test_iter_monthly_block_positions_requires_positive_months_per_row():
    """months_per_row must be a positive integer."""

    with pytest.raises(ValueError):
        list(_iter_monthly_block_positions({(2021, 1): 1}, 0))
    with pytest.raises(ValueError):
        list(_iter_monthly_block_positions({(2021, 1): 1}, -1))


def test_generate_scad_monthly_levels():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scads = generate_scad_monthly_levels(counts)
    assert 1 in scads and 2 in scads
    assert "translate([0, 0, 0]) cube(10);" in scads[1]
    assert "translate([12, 0, 0]) cube(10);" in scads[1]
    assert "translate([12, 0, 10]) cube(10);" in scads[2]


def test_generate_scad_monthly_levels_custom_rows():
    counts = {
        (2021, 1): 1,
        (2021, 2): 10,
    }
    scads = generate_scad_monthly_levels(counts, months_per_row=1)
    assert "translate([0, 0, 0]) cube(10);" in scads[1]
    assert "translate([0, 12, 0]) cube(10);" in scads[1]
    assert "translate([0, 12, 10]) cube(10);" in scads[2]


def test_generate_month_calendar_scad_positions():
    daily = {
        (2024, 1, 1): 1,
        (2024, 1, 6): 10,
        (2024, 1, 31): 100,
    }
    scad = generate_month_calendar_scad(daily, 2024, 1)
    assert "translate([0, 0, 0]) cube(10); // 2024-01-01" in scad
    assert "translate([0, 12, 0]) cube(10); // 2024-01-06" in scad
    assert "translate([0, 12, 10]) cube(10); // 2024-01-06" in scad
    assert "translate([0, 72, 20]) cube(10); // 2024-01-31" in scad


def test_generate_month_calendar_scad_requires_positive_days_per_row():
    with pytest.raises(ValueError):
        generate_month_calendar_scad({}, 2024, 1, days_per_row=0)


def test_generate_monthly_calendar_scads_returns_all_months():
    daily = {(2023, 2, 1): 5}
    calendars = generate_monthly_calendar_scads(daily, 2023)
    assert set(calendars) == set(range(1, 13))
    assert "2023-02-01" in calendars[2]
    assert calendars[1].strip() == "// Generated by gitshelves"


def test_group_scad_levels():
    levels = {
        1: "// Generated by g\nA",
        2: "// Generated by g\nB",
        3: "// Generated by g\nC",
    }
    grouped = group_scad_levels(levels, 2)
    assert grouped[1] == "// Generated by gitshelves\nA\nB"
    assert grouped[2] == "// Generated by gitshelves\nC"


def test_generate_scad_monthly_levels_empty():
    assert generate_scad_monthly_levels({}) == {}


def test_group_scad_levels_empty():
    assert group_scad_levels({}, 3) == {}


def test_group_scad_levels_single_group():
    levels = {
        1: "// Generated by g\nA",
        2: "// Generated by g\nB",
    }
    grouped = group_scad_levels(levels, 1)
    assert grouped[1] == "// Generated by gitshelves\nA\nB"


def test_group_scad_levels_single_group_unsorted_levels():
    """Levels should be combined in numeric order regardless of dict order."""
    levels = {2: "// Generated by g\nB", 1: "// Generated by g\nA"}
    grouped = group_scad_levels(levels, 1)
    assert grouped[1] == "// Generated by gitshelves\nA\nB"


def test_group_scad_levels_more_groups_than_levels():
    levels = {
        1: "// Generated by g\nA",
        2: "// Generated by g\nB",
    }
    grouped = group_scad_levels(levels, 5)
    assert grouped[1] == "// Generated by gitshelves\nA"
    assert grouped[2] == "// Generated by gitshelves\nB"
    assert set(grouped) == {1, 2}


def test_group_scad_levels_invalid_groups():
    levels = {1: "// Generated by g\nA"}
    with pytest.raises(ValueError):
        group_scad_levels(levels, 0)


def test_group_scad_levels_negative_groups():
    levels = {1: "// Generated by g\nA"}
    with pytest.raises(ValueError):
        group_scad_levels(levels, -2)


def test_group_scad_levels_rejects_non_positive_levels():
    with pytest.raises(ValueError):
        group_scad_levels({0: "// Generated by g\nA"}, 1)
    with pytest.raises(ValueError):
        group_scad_levels({-1: "// Generated by g\nA"}, 1)


def test_group_scad_levels_with_four_groups_collects_extras_into_last():
    levels = {
        1: "// Generated by g\nL1",
        2: "// Generated by g\nL2",
        3: "// Generated by g\nL3",
        4: "// Generated by g\nL4",
        5: "// Generated by g\nL5",
    }
    grouped = group_scad_levels(levels, 4)
    assert set(grouped) == {1, 2, 3, 4}
    assert grouped[1] == "// Generated by gitshelves\nL1"
    assert grouped[2] == "// Generated by gitshelves\nL2"
    assert grouped[3] == "// Generated by gitshelves\nL3"
    assert grouped[4] == "// Generated by gitshelves\nL4\nL5"


def test_group_scad_levels_extra_levels_append_to_last_group():
    levels = {
        1: "// Generated by g\nL1",
        2: "// Generated by g\nL2",
        3: "// Generated by g\nL3",
        4: "// Generated by g\nL4",
        5: "// Generated by g\nL5",
        6: "// Generated by g\nL6",
    }
    grouped = group_scad_levels(levels, 4)
    assert set(grouped) == {1, 2, 3, 4}
    assert grouped[1] == "// Generated by gitshelves\nL1"
    assert grouped[2] == "// Generated by gitshelves\nL2"
    assert grouped[3] == "// Generated by gitshelves\nL3"
    assert grouped[4] == "// Generated by gitshelves\nL4\nL5\nL6"


def test_scad_to_stl_missing(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: None)
    with pytest.raises(FileNotFoundError):
        scad_to_stl(str(scad), str(stl))


def test_scad_to_stl_calls_openscad(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")
    monkeypatch.setattr("shutil.which", lambda x: "/usr/bin/openscad")
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)
    monkeypatch.setenv("DISPLAY", ":0")
    scad_to_stl(str(scad), str(stl))
    assert called["cmd"] == [
        "openscad",
        "-o",
        str(stl),
        "--export-format",
        "binstl",
        str(scad),
    ]


def test_scad_to_stl_uses_xvfb(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")

    def which(binary):
        if binary == "openscad":
            return "/usr/bin/openscad"
        if binary == "xvfb-run":
            return "/usr/bin/xvfb-run"
        return None

    monkeypatch.setattr("shutil.which", which)
    monkeypatch.delenv("DISPLAY", raising=False)
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)

    scad_to_stl(str(scad), str(stl))
    assert called["cmd"] == [
        "xvfb-run",
        "--auto-servernum",
        "--server-args=-screen 0 1024x768x24",
        "openscad",
        "-o",
        str(stl),
        "--export-format",
        "binstl",
        str(scad),
    ]


def test_scad_to_stl_empty_display(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")

    def which(binary):
        if binary == "openscad":
            return "/usr/bin/openscad"
        if binary == "xvfb-run":
            return "/usr/bin/xvfb-run"
        return None

    monkeypatch.setattr("shutil.which", which)
    monkeypatch.setenv("DISPLAY", "")
    called = {}

    def fake_run(cmd, check):
        called["cmd"] = cmd

    monkeypatch.setattr("subprocess.run", fake_run)

    scad_to_stl(str(scad), str(stl))
    assert called["cmd"][0] == "xvfb-run"
    assert "--export-format" in called["cmd"]
    assert "binstl" in called["cmd"]


def test_scad_to_stl_xvfb_missing(monkeypatch, tmp_path):
    scad = tmp_path / "m.scad"
    stl = tmp_path / "m.stl"
    scad.write_text("cube(1);")

    def which(binary):
        if binary == "openscad":
            return "/usr/bin/openscad"
        return None

    monkeypatch.setattr("shutil.which", which)
    monkeypatch.delenv("DISPLAY", raising=False)
    with pytest.raises(RuntimeError):
        scad_to_stl(str(scad), str(stl))


def test_generate_scad():
    scad = generate_scad([0, 1, 10])
    lines = scad.splitlines()
    assert lines[0] == "// Generated by gitshelves"
    assert "translate([12, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 0]) cube(10);" in scad
    assert "translate([24, 0, 10]) cube(10);" in scad
    assert "translate([0, 0, 0]) cube(10);" not in scad


def test_generate_scad_monthly_requires_positive_months_per_row():
    counts = {(2021, 1): 1}
    with pytest.raises(ValueError):
        generate_scad_monthly(counts, months_per_row=0)
    with pytest.raises(ValueError):
        generate_scad_monthly(counts, months_per_row=-1)


def test_generate_scad_monthly_levels_requires_positive_months_per_row():
    counts = {(2021, 1): 1}
    with pytest.raises(ValueError):
        generate_scad_monthly_levels(counts, months_per_row=0)
    with pytest.raises(ValueError):
        generate_scad_monthly_levels(counts, months_per_row=-2)


def test_generate_gridfinity_plate_scad_positions(gridfinity_library):
    counts = {
        (2024, 1): 1,
        (2024, 2): 10,
        (2024, 7): 100,
    }
    scad = generate_gridfinity_plate_scad(counts, 2024)
    assert "grid_x = 6;" in scad
    assert "grid_y = 2;" in scad
    assert "gridfinity_baseplate" in scad
    assert "module contribution_stack" in scad
    assert (
        "translate([0, 0, 0]) contribution_stack(1); // 2024-01 (1 contributions)"
        in scad
    )
    assert (
        "translate([42, 0, 0]) contribution_stack(2); // 2024-02 (10 contributions)"
        in scad
    )
    assert (
        "translate([0, 42, 0]) contribution_stack(3); // 2024-07 (100 contributions)"
        in scad
    )


def test_generate_gridfinity_plate_scad_respects_custom_columns(gridfinity_library):
    counts = {(2025, 1): 5}
    scad = generate_gridfinity_plate_scad(counts, 2025, columns=3)
    assert "grid_x = 3;" in scad
    assert "grid_y = 4;" in scad


def test_generate_gridfinity_plate_scad_requires_positive_columns():
    with pytest.raises(ValueError):
        generate_gridfinity_plate_scad({}, 2024, columns=0)


def test_generate_gridfinity_plate_scad_includes_absolute_library_paths(
    gridfinity_library,
):
    counts = {(2025, 1): 1}
    scad = generate_gridfinity_plate_scad(counts, 2025)
    baseplate_include = scad_module.GRIDFINITY_BASEPLATE_SCAD.as_posix()
    bin_include = scad_module.GRIDFINITY_BIN_SCAD.as_posix()
    assert f"use <{baseplate_include}>;" in scad
    assert f"use <{bin_include}>;" in scad


def test_generate_gridfinity_plate_scad_missing_library(monkeypatch):
    counts = {(2025, 1): 1}
    missing_baseplate = scad_module.GRIDFINITY_BASEPLATE_SCAD.with_name(
        "missing-baseplate.scad"
    )
    missing_bin = scad_module.GRIDFINITY_BIN_SCAD.with_name("missing-bin.scad")
    monkeypatch.setattr(
        scad_module, "GRIDFINITY_BASEPLATE_SCAD", missing_baseplate, raising=False
    )
    monkeypatch.setattr(scad_module, "GRIDFINITY_BIN_SCAD", missing_bin, raising=False)
    with pytest.raises(FileNotFoundError):
        generate_gridfinity_plate_scad(counts, 2025)


def test_generate_contrib_cube_stack_scad_levels(gridfinity_library):
    scad = generate_contrib_cube_stack_scad(3)
    bin_include = scad_module.GRIDFINITY_BIN_SCAD.as_posix()
    assert scad.startswith("// Generated by gitshelves")
    assert f"use <{bin_include}>;" in scad
    assert "module contribution_cube()" in scad
    assert "for (level = [0:levels-1])" in scad
    assert "contribution_stack(3);" in scad


def test_generate_contrib_cube_stack_scad_zero_levels(gridfinity_library):
    scad = generate_contrib_cube_stack_scad(0)
    assert "contribution_stack(0);" in scad
    assert "// No contributions" in scad


def test_generate_contrib_cube_stack_scad_requires_non_negative_levels():
    with pytest.raises(ValueError):
        generate_contrib_cube_stack_scad(-1)


def test_generate_contrib_cube_stack_scad_missing_library(monkeypatch):
    missing_bin = scad_module.GRIDFINITY_BIN_SCAD.with_name("missing-bin.scad")
    monkeypatch.setattr(scad_module, "GRIDFINITY_BIN_SCAD", missing_bin, raising=False)
    with pytest.raises(FileNotFoundError):
        generate_contrib_cube_stack_scad(2)
